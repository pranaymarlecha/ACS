import React from 'react';import React from 'react';

// --- Helper Components for UI ---

const Card = ({ children, className = '' }) => (
  <div className={`bg-white rounded-xl shadow-md p-6 ${className}`}>
    {children}
  </div>
);

const SectionTitle = ({ children }) => (
  <h2 className="text-xl font-bold text-gray-700 mb-4 border-b pb-2">{children}</h2>
);

const InputField = ({ label, type = 'number', value, onChange, name, placeholder = '', min = 0 }) => (
  <div className="mb-4">
    <label htmlFor={name} className="block text-sm font-medium text-gray-600 mb-1">{label}</label>
    <input
      type={type}
      id={name}
      name={name}
      value={value}
      onChange={onChange}
      placeholder={placeholder}
      min={min}
      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
    />
  </div>
);

const CheckboxField = ({ label, checked, onChange, name }) => (
  <div className="flex items-center mb-2">
    <input
      id={name}
      name={name}
      type="checkbox"
      checked={checked}
      onChange={onChange}
      className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
    />
    <label htmlFor={name} className="ml-2 block text-sm text-gray-800">
      {label}
    </label>
  </div>
);

const SelectField = ({ label, value, onChange, name, options }) => (
    <div className="mb-4">
        <label htmlFor={name} className="block text-sm font-medium text-gray-600 mb-1">{label}</label>
        <select
            id={name}
            name={name}
            value={value}
            onChange={onChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
        >
            {options.map(option => (
                <option key={option.value} value={option.value}>{option.label}</option>
            ))}
        </select>
    </div>
);

// --- Main Application Component ---
export default function App() {
  const [formData, setFormData] = React.useState({
    // Demographics
    age: 55,
    sex: 'Male',
    // Risk Factors
    diabetes: false,
    smoker: false,
    hypertension: false,
    dyslipidemia: false,
    familyHistory: false,
    // History & Examination
    systolicBP: 120,
    heartRate: 70,
    killipClass: 1,
    aspirinUse: false,
    severeAngina: false, // >=2 anginal events in 24h
    knownCAD: false, // Prior coronary stenosis >50%
    // Investigations
    ecgFindings: '',
    elevatedBiomarkers: false,
    creatinine: 1.0,
  });

  const [results, setResults] = React.useState(null);
  const [isGenerating, setIsGenerating] = React.useState(false);
  const [generatedContent, setGeneratedContent] = React.useState({ summary: '', differentials: '' });
  const [copySuccess, setCopySuccess] = React.useState('');

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };
  
  const resetForm = () => {
    setFormData({
        age: 55, sex: 'Male', diabetes: false, smoker: false, hypertension: false, dyslipidemia: false, familyHistory: false,
        systolicBP: 120, heartRate: 70, killipClass: 1, aspirinUse: false, severeAngina: false, knownCAD: false,
        ecgFindings: '', elevatedBiomarkers: false, creatinine: 1.0,
    });
    setResults(null);
    setGeneratedContent({ summary: '', differentials: '' });
    setCopySuccess('');
  };

  const calculateScoresAndDiagnosis = () => {
    // Reset previous AI content
    setGeneratedContent({ summary: '', differentials: '' });
    setCopySuccess('');

    // --- 1. Diagnosis Logic ---
    let diagnosis = 'Undetermined';
    let recommendations = [];
    const ecgLower = formData.ecgFindings.toLowerCase();

    if (ecgLower.includes('st elevation') || ecgLower.includes('st-elevation') || ecgLower.includes('new lbbb')) {
        diagnosis = 'High-Probability STEMI';
        recommendations = [
            'Activate Cath Lab for immediate reperfusion (Primary PCI).',
            'Administer dual antiplatelet therapy (Aspirin + P2Y12 inhibitor).',
            'Initiate anticoagulation.',
            'Administer high-intensity statin.',
        ];
    } else if (formData.elevatedBiomarkers && (ecgLower.includes('st depression') || ecgLower.includes('t wave inversion') || ecgLower.includes('dynamic changes'))) {
        diagnosis = 'High-Probability NSTEMI';
        recommendations = [
            'Admit to Cardiac Care Unit (CCU).',
            'Initiate dual antiplatelet therapy and anticoagulation.',
            'Perform risk stratification (see scores below).',
            'Consider early invasive strategy based on risk profile.',
        ];
    } else if (!formData.elevatedBiomarkers && (ecgLower.includes('st depression') || ecgLower.includes('t wave inversion') || formData.severeAngina)) {
        diagnosis = 'Unstable Angina';
        recommendations = [
            'Admit for observation and serial ECGs/biomarkers.',
            'Initiate anti-ischemic therapy.',
            'Consider non-invasive stress testing if patient stabilizes.',
        ];
    } else {
        diagnosis = 'Low Probability ACS / Non-cardiac Chest Pain';
        recommendations = [
            'Consider alternative diagnoses for chest pain (e.g., PE, aortic dissection, GI causes).',
            'Further observation or outpatient workup may be appropriate based on clinical judgment.',
        ];
    }

    // --- 2. TIMI Score Calculation ---
    let timiScore = 0;
    const riskFactorsCount = [formData.diabetes, formData.smoker, formData.hypertension, formData.dyslipidemia, formData.familyHistory].filter(Boolean).length;
    if (formData.age >= 65) timiScore++;
    if (riskFactorsCount >= 3) timiScore++;
    if (formData.knownCAD) timiScore++;
    if (formData.aspirinUse) timiScore++;
    if (formData.severeAngina) timiScore++;
    if (ecgLower.includes('st depression') || ecgLower.includes('st elevation')) timiScore++;
    if (formData.elevatedBiomarkers) timiScore++;
    
    let timiRisk = 'Low';
    if (timiScore >= 3 && timiScore <= 4) timiRisk = 'Intermediate';
    if (timiScore >= 5) timiRisk = 'High';

    // --- 3. GRACE Score Calculation (Simplified) ---
    // This is a simplified model. The full GRACE 2.0 is more complex.
    let graceScore = 0;
    // Age points
    if (formData.age >= 40 && formData.age <= 49) graceScore += 15;
    else if (formData.age >= 50 && formData.age <= 59) graceScore += 30;
    else if (formData.age >= 60 && formData.age <= 69) graceScore += 45;
    else if (formData.age >= 70 && formData.age <= 79) graceScore += 60;
    else if (formData.age >= 80) graceScore += 75;
    // Heart Rate points
    if (formData.heartRate >= 90 && formData.heartRate <= 109) graceScore += 7;
    else if (formData.heartRate >= 110) graceScore += 15;
    // Systolic BP points
    if (formData.systolicBP < 100) graceScore += 20;
    else if (formData.systolicBP >= 100 && formData.systolicBP <= 119) graceScore += 15;
    else if (formData.systolicBP >= 120 && formData.systolicBP <= 139) graceScore += 10;
    // Creatinine points
    if (formData.creatinine >= 1.2 && formData.creatinine < 2.0) graceScore += 5;
    else if (formData.creatinine >= 2.0) graceScore += 10;
    // Killip Class points
    if (formData.killipClass == 2) graceScore += 15;
    else if (formData.killipClass == 3) graceScore += 30;
    else if (formData.killipClass == 4) graceScore += 45;

    let graceRisk = 'Low (<1% mortality)';
    if (graceScore > 108 && graceScore <= 140) graceRisk = 'Intermediate (1-3% mortality)';
    if (graceScore > 140) graceRisk = 'High (>3% mortality)';
    
    // Add risk-based recommendations
    if(diagnosis === 'High-Probability NSTEMI') {
        if(timiRisk === 'High' || graceRisk === 'High (>3% mortality)') {
             recommendations.push("High-risk patient: Strongly consider an early invasive strategy (< 24 hours).");
        } else {
             recommendations.push("Lower-risk patient: Ischemia-guided or delayed invasive strategy may be considered.");
        }
    }


    setResults({
      diagnosis,
      recommendations,
      timi: { score: timiScore, risk: timiRisk },
      grace: { score: graceScore, risk: graceRisk },
    });
  };

  const callGeminiAPI = async (prompt) => {
    setIsGenerating(true);
    const apiKey = ""; // In a real app, use an environment variable
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

    const payload = {
      contents: [{ parts: [{ text: prompt }] }],
    };

    try {
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      if (!response.ok) {
        throw new Error(`API call failed with status: ${response.status}`);
      }
      const result = await response.json();
      const text = result.candidates?.[0]?.content?.parts?.[0]?.text;
      if (!text) {
        throw new Error("No text returned from API.");
      }
      return text;
    } catch (error) {
      console.error("Gemini API call error:", error);
      return `Error: Could not generate content. ${error.message}`;
    } finally {
      setIsGenerating(false);
    }
  };

  const handleGenerateSummary = async () => {
    const riskFactors = Object.entries({
      "Diabetes": formData.diabetes,
      "Smoking": formData.smoker,
      "Hypertension": formData.hypertension,
      "Dyslipidemia": formData.dyslipidemia,
      "Family Hx of CAD": formData.familyHistory
    }).filter(([, value]) => value).map(([key]) => key).join(', ') || 'none';

    const prompt = `
      You are a clinical assistant summarizing a patient case for an electronic health record. Be concise, professional, and use standard medical terminology.
      Generate a brief summary paragraph for a patient presenting with suspected Acute Coronary Syndrome based on the following data:

      - Patient: ${formData.age}-year-old ${formData.sex}
      - Key Risk Factors: ${riskFactors}
      - Vitals: BP ${formData.systolicBP} mmHg, HR ${formData.heartRate} bpm
      - Key Exam Findings: Killip Class ${formData.killipClass}
      - Pertinent History: Known CAD (${formData.knownCAD}), Aspirin use (${formData.aspirinUse}), Severe Angina in last 24h (${formData.severeAngina})
      - ECG Findings: "${formData.ecgFindings || 'Not specified'}"
      - Biomarkers: ${formData.elevatedBiomarkers ? 'Elevated' : 'Not elevated'}
      - Assessment:
        - Suggested Diagnosis: ${results.diagnosis}
        - TIMI Score: ${results.timi.score} (${results.timi.risk} risk)
        - GRACE Score: ${results.grace.score} (${results.grace.risk} in-hospital mortality risk)
    `;
    const summary = await callGeminiAPI(prompt);
    setGeneratedContent(prev => ({ ...prev, summary }));
  };
  
  const handleGenerateDifferentials = async () => {
     const prompt = `
        You are a clinical decision support AI. Your role is to help clinicians consider alternative diagnoses for a patient with chest pain where ACS is unlikely.
        
        For a ${formData.age}-year-old ${formData.sex} with chest pain, but a low probability of Acute Coronary Syndrome based on initial workup, list the most likely differential diagnoses. 
        For each, provide a brief one-sentence explanation of why it should be considered.
        Organize the list into two categories: "Critical (Cannot Miss)" and "Common Causes".
     `;
     const differentials = await callGeminiAPI(prompt);
     setGeneratedContent(prev => ({ ...prev, differentials }));
  };
  
  const copyToClipboard = (text) => {
    // navigator.clipboard.writeText is modern but can fail in secure contexts like iframes
    navigator.clipboard.writeText(text).then(() => {
        setCopySuccess('Copied!');
        setTimeout(() => setCopySuccess(''), 2000);
    }).catch(err => {
        // Fallback to the older execCommand method
        const textArea = document.createElement("textarea");
        textArea.value = text;
        textArea.style.position = "fixed"; // Avoid scrolling to bottom
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        try {
            document.execCommand('copy');
            setCopySuccess('Copied!');
            setTimeout(() => setCopySuccess(''), 2000);
        } catch (err) {
            setCopySuccess('Failed to copy');
            setTimeout(() => setCopySuccess(''), 2000);
        }
        document.body.removeChild(textArea);
    });
  };

  const getResultColor = () => {
    if (!results) return 'border-gray-300';
    if (results.diagnosis.includes('STEMI') || results.grace.risk.includes('High') || results.timi.risk.includes('High')) return 'border-red-500';
    if (results.diagnosis.includes('NSTEMI') || results.grace.risk.includes('Intermediate') || results.timi.risk.includes('Intermediate')) return 'border-yellow-500';
    return 'border-green-500';
  };

  return (
    <div className="min-h-screen bg-gray-50 font-sans text-gray-800">
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
          <h1 className="text-3xl font-bold text-gray-900">ACS Diagnostic & Risk Assessment Tool</h1>
          <p className="text-sm text-gray-500 mt-1">Based on ESC Guideline Pathways, with ✨ AI-Powered Summaries</p>
        </div>
      </header>
      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* --- Input Column --- */}
          <div className="space-y-6">
            <Card>
              <SectionTitle>Patient Data</SectionTitle>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                 <InputField label="Age" name="age" value={formData.age} onChange={handleChange} />
                 <SelectField label="Sex" name="sex" value={formData.sex} onChange={handleChange} options={[{value: 'Male', label: 'Male'}, {value: 'Female', label: 'Female'}]} />
              </div>
            </Card>
            
            <Card>
                <SectionTitle>Clinical Risk Factors</SectionTitle>
                <div className="grid grid-cols-2 gap-2">
                    <CheckboxField label="Diabetes Mellitus" name="diabetes" checked={formData.diabetes} onChange={handleChange} />
                    <CheckboxField label="Smoker (Current or recent)" name="smoker" checked={formData.smoker} onChange={handleChange} />
                    <CheckboxField label="Hypertension" name="hypertension" checked={formData.hypertension} onChange={handleChange} />
                    <CheckboxField label="Dyslipidemia" name="dyslipidemia" checked={formData.dyslipidemia} onChange={handleChange} />
                    <CheckboxField label="Family History of CAD" name="familyHistory" checked={formData.familyHistory} onChange={handleChange} />
                </div>
            </Card>

            <Card>
              <SectionTitle>History & Examination</SectionTitle>
               <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <InputField label="Systolic BP (mmHg)" name="systolicBP" value={formData.systolicBP} onChange={handleChange} />
                    <InputField label="Heart Rate (bpm)" name="heartRate" value={formData.heartRate} onChange={handleChange} />
                    <InputField label="Serum Creatinine (mg/dL)" name="creatinine" type="number" step="0.1" value={formData.creatinine} onChange={handleChange} placeholder="e.g., 1.0" min="0.1" />
                    <SelectField label="Killip Class" name="killipClass" value={formData.killipClass} onChange={handleChange} options={[
                        {value: 1, label: 'I - No heart failure'},
                        {value: 2, label: 'II - Rales, S3 gallop'},
                        {value: 3, label: 'III - Pulmonary edema'},
                        {value: 4, label: 'IV - Cardiogenic shock'},
                    ]}/>
                </div>
                 <div className="mt-4 space-y-2">
                     <CheckboxField label="Aspirin use in last 7 days" name="aspirinUse" checked={formData.aspirinUse} onChange={handleChange} />
                     <CheckboxField label="≥2 anginal events in last 24h" name="severeAngina" checked={formData.severeAngina} onChange={handleChange} />
                     <CheckboxField label="Known CAD (>50% stenosis)" name="knownCAD" checked={formData.knownCAD} onChange={handleChange} />
                 </div>
            </Card>
            
            <Card>
                <SectionTitle>Investigations</SectionTitle>
                <div>
                     <label htmlFor="ecgFindings" className="block text-sm font-medium text-gray-600 mb-1">ECG Findings (Text)</label>
                     <textarea
                        id="ecgFindings"
                        name="ecgFindings"
                        rows="3"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                        placeholder="e.g., 'ST elevation in II, III, aVF' or 'ST depression in V4-V6'"
                        value={formData.ecgFindings}
                        onChange={handleChange}
                    ></textarea>
                </div>
                 <div className="mt-4">
                    <CheckboxField label="Elevated Cardiac Biomarkers (Troponin)" name="elevatedBiomarkers" checked={formData.elevatedBiomarkers} onChange={handleChange} />
                </div>
            </Card>

            <div className="flex space-x-4">
                 <button onClick={calculateScoresAndDiagnosis} className="w-full bg-indigo-600 text-white py-3 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 font-semibold">
                    Analyze Patient Data
                 </button>
                 <button onClick={resetForm} className="w-full bg-gray-200 text-gray-700 py-3 px-4 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 font-semibold">
                    Reset
                 </button>
            </div>
          </div>

          {/* --- Output Column --- */}
          <div className="space-y-6">
            <Card className={`border-2 transition-all duration-300 ${getResultColor()}`}>
               <SectionTitle>Assessment & Recommendations</SectionTitle>
               {results ? (
                 <div className="space-y-6">
                    <div>
                        <h3 className="text-lg font-semibold text-gray-800">Diagnosis Suggestion</h3>
                        <p className={`text-2xl font-bold ${results.diagnosis.includes('STEMI') ? 'text-red-600' : 'text-indigo-600'}`}>{results.diagnosis}</p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="bg-gray-50 p-4 rounded-lg">
                             <h4 className="font-semibold text-gray-700">TIMI Score (NSTE-ACS)</h4>
                             <p className="text-3xl font-bold text-gray-900">{results.timi.score}</p>
                             <p className="text-sm font-medium text-gray-600">Risk: <span className="font-bold">{results.timi.risk}</span></p>
                        </div>
                         <div className="bg-gray-50 p-4 rounded-lg">
                             <h4 className="font-semibold text-gray-700">GRACE Score</h4>
                             <p className="text-3xl font-bold text-gray-900">{results.grace.score}</p>
                             <p className="text-sm font-medium text-gray-600">In-hospital Mortality: <span className="font-bold">{results.grace.risk}</span></p>
                        </div>
                    </div>

                    <div>
                         <h3 className="text-lg font-semibold text-gray-800">Recommended Next Steps</h3>
                         <ul className="list-disc list-inside mt-2 space-y-1 text-gray-700">
                            {results.recommendations.map((rec, index) => <li key={index}>{rec}</li>)}
                         </ul>
                    </div>
                    
                    {/* Gemini Features */}
                    <div className="border-t pt-4 space-y-4">
                        <div className="flex items-center justify-between">
                            <h3 className="text-lg font-semibold text-gray-800">✨ AI-Powered Tools</h3>
                        </div>
                        
                        <button onClick={handleGenerateSummary} disabled={isGenerating} className="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 disabled:bg-blue-300 font-semibold flex items-center justify-center">
                            {isGenerating && !generatedContent.summary ? 'Generating...' : 'Generate Clinical Summary'}
                        </button>
                        
                        {generatedContent.summary && (
                            <div className="bg-gray-100 p-3 rounded-md">
                                <textarea readOnly value={generatedContent.summary} rows="6" className="w-full text-sm bg-gray-100 border-0 focus:ring-0 resize-none"></textarea>
                                <button onClick={() => copyToClipboard(generatedContent.summary)} className="text-sm text-blue-600 hover:underline mt-1">{copySuccess || 'Copy to Clipboard'}</button>
                            </div>
                        )}
                        
                        {results.diagnosis.includes('Low Probability') && (
                            <>
                                <button onClick={handleGenerateDifferentials} disabled={isGenerating} className="w-full bg-teal-500 text-white py-2 px-4 rounded-md hover:bg-teal-600 disabled:bg-teal-300 font-semibold flex items-center justify-center">
                                    {isGenerating && !generatedContent.differentials ? 'Generating...' : 'Suggest Differential Diagnoses'}
                                </button>
                                {generatedContent.differentials && (
                                     <div className="bg-gray-100 p-3 rounded-md">
                                        <textarea readOnly value={generatedContent.differentials} rows="8" className="w-full text-sm bg-gray-100 border-0 focus:ring-0 resize-none"></textarea>
                                     </div>
                                )}
                            </>
                        )}
                    </div>

                 </div>
               ) : (
                <div className="text-center py-10">
                    <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
                    </svg>
                    <h3 className="mt-2 text-sm font-medium text-gray-900">Awaiting Analysis</h3>
                    <p className="mt-1 text-sm text-gray-500">Enter patient data and click "Analyze" to see results.</p>
                </div>
               )}
            </Card>
            
            <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-md" role="alert">
                <p className="font-bold">Disclaimer</p>
                <p className="text-sm">This tool is for educational and clinical decision-support purposes only. It is not a substitute for professional medical judgment, diagnosis, or treatment. All clinical decisions must be made by a qualified healthcare professional.</p>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}


                <p className="font-bold">Disclaimer</p>
                <p className="text-sm">This tool is for educational and clinical decision-support purposes only. It is not a substitute for professional medical judgment, diagnosis, or treatment. All clinical decisions must be made by a qualified healthcare professional.</p>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}

